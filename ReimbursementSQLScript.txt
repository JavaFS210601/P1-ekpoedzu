DROP TABLE ers_reimbursement;

CREATE TABLE ers_reimbursement (
  reimb_id          INT NOT NULL,
  reimb_amount      INT,
  reimb_submitted   TIMESTAMP NOT NULL,
  reimb_resolved    TIMESTAMP,
  reimb_description VARCHAR(250),
  reimb_receipt    TEXT,
  reimb_author      INT    NOT NULL,
  reimb_resolver    INT,
  reimb_status_id   INT    NOT NULL,
  reimb_type_id     INT    NOT NULL,
  CONSTRAINT ers_reimbursement_pk PRIMARY KEY (reimb_id)
);

DROP TABLE ers_reimbursement_status;
-- Current reimbursement statuses: APPROVED, PENDING and DENIED
CREATE TABLE ers_reimbursement_status (
  reimb_status_id  INT NOT NULL,
  reimb_status    VARCHAR(10) NOT NULL,
  CONSTRAINT reimb_status_pk PRIMARY KEY (reimb_status_id)
);

DROP TABLE ers_reimbursement_type;
-- Current reimbursement types: LODGING, TRAVEL, FOOD or OTHER
 CREATE TABLE ers_reimbursement_type (
  reimb_type_id INT,
  reimb_type    TEXT,
  CONSTRAINT reimb_type_pk PRIMARY KEY (reimb_type_id)
);

DROP TABLE ers_users;

CREATE TABLE ers_users (
  ers_users_id  INT NOT NULL,
  ers_username    VARCHAR(50)  NOT NULL UNIQUE,
  ers_password    VARCHAR(100)  NOT NULL,
  user_first_name VARCHAR(100) NOT NULL,
  user_last_name  VARCHAR(100) NOT NULL,
  user_email      VARCHAR(150) NOT NULL UNIQUE,
  user_role_id   INT       NOT NULL,
  CONSTRAINT ers_users_pk PRIMARY KEY (ers_users_id)
);

DROP TABLE ers_user_roles;
CREATE TABLE ers_user_roles (
  ers_user_role_id INT NOT NULL,
  user_role        VARCHAR(20) NOT NULL,
  CONSTRAINT ers_user_roles_pk PRIMARY KEY (ers_user_role_id)
);



SELECT * FROM ers_users;

select* FROM ers_reimbursement;







-- ERS_REIMBURSEMENT table foreign keys
ALTER TABLE ers_reimbursement
  ADD CONSTRAINT ers_users_fk_auth
FOREIGN KEY (reimb_author)
REFERENCES ers_users (ers_users_id);

ALTER TABLE ers_reimbursement
  ADD CONSTRAINT ers_users_fk_reslvr
FOREIGN KEY (reimb_resolver)
REFERENCES ers_users (ers_users_id);

ALTER TABLE ers_reimbursement
  ADD CONSTRAINT ers_reimbursement_status_fk
FOREIGN KEY (reimb_status_id)
REFERENCES ers_reimbursement_status (reimb_status_id);

ALTER TABLE ers_reimbursement
  ADD CONSTRAINT ers_reimbursement_type_fk
FOREIGN KEY (reimb_type_id)
REFERENCES ers_reimbursement_type (reimb_type_id);

-- ERS_USERS table foreign keys
ALTER TABLE ers_users
  ADD CONSTRAINT user_roles_fk
FOREIGN KEY (user_role_id)
REFERENCES ers_user_roles (ers_user_role_id);


--Populating ERS_REIMBURSEMENT_STATUS
INSERT INTO ers_reimbursement_status
VALUES (1, 'Approved');
INSERT INTO ers_reimbursement_status
VALUES (2, 'Pending');
INSERT INTO ers_reimbursement_status
VALUES (3, 'Denied');

--Populating ERS_REIMBURSEMENT_TYPE
INSERT INTO ers_reimbursement_type
VALUES (1, 'Lodging');
INSERT INTO ers_reimbursement_type
VALUES (2, 'Travel');
INSERT INTO ers_reimbursement_type
VALUES (3, 'Food');
INSERT INTO ers_reimbursement_type
VALUES (4, 'Other');

--Populating ERS_USER_ROLES
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (1, 'Revature CEO');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (2, 'QC Instructor');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (3, 'Trainers Coordinator');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (4, 'HR Manager');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (5, 'Project Manager');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (6, ' Accounting Manger');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (7, 'Senior Editor');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (8, 'Associate Professor');
INSERT INTO ers_user_roles (ers_user_role_id, user_role) VALUES (9, 'Web Designer I');

--Populating ERS_USERS
INSERT INTO ers_users (ers_users_id, ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id)
VALUES (1, 'olaolga', 'admin', 'Olga', 'Hoola', 'olaolga@rvt.net', 9),

       (2, 'ssmith', 'presby', 'Solange', 'Smith', 'spresby@yahoo.com', 5),

       (3, 'rnonos', 'pass1', 'Rose', 'Nonos', 'rnonos@gmail.com', 4),

       (4, 'admin', 'admin1', 'Joy', 'Junior', 'jjunior@rvt.net', 2),

       (5, 'renega1', 'revenge', 'Renee', 'Birega', 'rbirega@gmail.com', 1),

       (6, 'nkrueger', 'koshi', 'Nina', 'Krueger', 'nkrueger@yahoo.de', 3),

       (7, 'eliseap', 'courage', 'Elisa', 'Ruben', 'eruben@amazon.com', 6),

       (8, 'jmouru', 'avangers', 'Joh', 'Mouru', 'jmouru@rvt.net', 7),

       (9, 'skenny', 'zerenka', 'Sonia', 'Kenny', 'skenny@gmail.com', 8);

--Populating ERS_REIMBURSEMENT
      
INSERT INTO ers_reimbursement (reimb_id, reimb_amount, reimb_submitted, reimb_resolved, reimb_description, reimb_receipt, reimb_author, reimb_resolver, reimb_status_id, reimb_type_id)
VALUES (7, 500.50, TIMESTAMP '2021-07-07', NULL,
        'This to confirm that the reimbursement is effective', NULL, 2, 5, 2, 1),
       (2, 700.00, TIMESTAMP '2021-07-07', NULL, NULL, NULL, 1, 8, 2, 2),
       (3, 400.85, TIMESTAMP '2021-07-07', NULL,
        'Confirmed with replacement note', NULL, 2, 6, 1,
        1),
        (4, 1000.00, TIMESTAMP '2021-07-07', NULL,
        '',
        NULL, 5, 1, 3, 4);
       
       
       
SELECT* FROM ers_reimbursement;

SELECT* FROM ers_users;

SELECT* FROM ers_users;
